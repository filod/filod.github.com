<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[filod's not here]]></title>
  <link href="http://filod.github.com/atom.xml" rel="self"/>
  <link href="http://filod.github.com/"/>
  <updated>2012-10-24T12:13:36+08:00</updated>
  <id>http://filod.github.com/</id>
  <author>
    <name><![CDATA[filod]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[css sprite 相关工具的相关研究]]></title>
    <link href="http://filod.github.com/blog/2012/08/24/zi-dong-pin-he-spritetu-pian-de-gong-ju-yu-keng/"/>
    <updated>2012-08-24T20:54:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/08/24/zi-dong-pin-he-spritetu-pian-de-gong-ju-yu-keng</id>
    <content type="html"><![CDATA[<h1>导读</h1>

<p><strong>sprite</strong> 图一种常见的css优化手段，但手工完成这项工作难免枯燥，于是有各种大牛发明了各种自动化或者半自动化的工具来解决这一问题。</p>

<p>从要解决的问题来讲，工具们在被制造时有如下几个出发点：</p>

<ol>
<li>有一堆小图片，如何生成一张大图和现成的 css。</li>
<li>有一张大图片，如何知道大图片中的小图片对应的 css。</li>
<li>有一堆小图片，以及写好的css，如何生成一张大图和对应的css。</li>
</ol>


<p><a href="http://cn.spritegen.website-performance.org/">css sprites</a>、<a href="http://alloyteam.github.com/gopng/">gopng</a>、<a href="https://github.com/jakesgordon/sprite-factory">sprite-factory</a>这几种工具对应出发点1，<a href="http://www.spritecow.com/">spritecow</a>对应出发点2，<a href="https://github.com/iazrael/ispriter">ispriter</a>则对应3。</p>

<!-- more -->


<h2>应用和原理</h2>

<h4>有一堆小图片，如何生成一张大图和现成的 css？</h4>

<p><strong>css sprites</strong>似乎最早是腾讯的鬼哥基于C#写的工具版，后来搬到了<a href="http://cn.spritegen.website-performance.org/">网上</a>，<a href="http://alloyteam.github.com/gopng/">gopng</a> 则似乎是css sprites的HTML5版继任者*。它们的基本原理是读取图片，然后基于<a href="https://github.com/jakesgordon/bin-packing">一些算法</a>把小图片拼合为一张大图片，拼合的同时记录小图片在大图片中的位置，以此生成对应的css代码。<a href="https://github.com/jakesgordon/sprite-factory">sprite-factory</a>则类似，不过因为是开源的命令行工具，相较于前两者而言你可以方便地集成到自己项目的build代码中。</p>

<p><em>*没去考证，总之这俩工具都是腾讯的哥哥们搞的</em></p>

<h4>有一张大图片，如何知道大图片中的小图片对应的 css？</h4>

<p><a href="http://www.spritecow.com/">spritecow</a>是一个比较半自动化的工具，你如果有一张大图片的话，可以通过spritecow自动定位大图片中的小图片的<code>position</code>，并生成该小图片相应的css，简单易用，用用便知，基本原理的话则与上一种做法相反。</p>

<h4>有一堆小图片，以及写好的css，如何生成一张大图和对应的css。</h4>

<p>如果很不幸，你手头已经有一堆图片，一堆写好的css，以及一堆使用着这些css的HTML代码，显然前述两种做法对你而言只能是做“加法”，而不易全部推倒，还好有<a href="https://github.com/iazrael/ispriter">ispriter</a>这个工具，这个工具相较于前两者，多了一个css分析步骤，可以在不影响已有css的情况下，生成大图和css，具体的使用和原理可以<a href="http://imatlas.com/posts/nodejs-intelligent-merge-css-sprite/">看看这篇文章</a>。</p>

<h2>我们的需求</h2>

<p>除了文章开始的提到的三种需求，可能更多人会遇到这种困扰（这篇博文就源于此）：</p>

<p>有<strong>一些</strong>不大不小图片，它们都有着已经写好的css sprites代码，随着星转斗移，<strong>一些</strong>不大不小的图片变成了<strong>一堆</strong>，这时候，你想把它们合到一张图片中去，你也不想更改你的css代码和HTML代码，而且最好一个按钮，一切搞定。</p>

<p><strong>答案是，一键清理，不可能——或者说，极其困难。</strong></p>

<p>所以，在这种情况下想寻求懒方法的朋友可以关掉浏览器了，再见不送~:P</p>

<p>下面详细分析下产生限制的原因和权衡的解法。</p>

<h3>为什么不可能</h3>

<p>好，首先假设你已经认认真真看完了关于ispriter的文章，关于基本原理和用法就差不多明白了，不过多介绍。
如果你已经有一堆，基于这种原理进行自动拼合 sprite 时，会遇到以下限制：</p>

<p><strong>1. 重复属性定义.  </strong></p>

<p>以这种常见情况为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">background</span><span class="nd">:-moz-linear-gradient</span><span class="o">(</span><span class="nt">top</span><span class="o">,</span><span class="nf">#adda4d</span><span class="o">,</span><span class="nf">#86b846</span><span class="o">);</span>
</span><span class='line'><span class="nt">background</span><span class="nd">:-webkit-gradient</span><span class="o">(</span><span class="nt">linear</span><span class="o">,</span><span class="nt">0</span> <span class="nt">0</span><span class="o">,</span><span class="nt">0</span> <span class="nt">100</span><span class="o">%,</span><span class="nt">from</span><span class="o">(</span><span class="nf">#adda4d</span><span class="o">),</span><span class="nt">to</span><span class="o">(</span><span class="nf">#86b846</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为<code>CSSOM</code>解析器不可能针对某一种前缀来保存解析后的样式表，所以像重复定义但是有多个前缀以适应不同浏览器的样式，<code>CSSOM</code>解析器在解析css代码时会覆盖重复的属性定义，解析出的<code>cssRules</code>中将只包含最后定义的属性（因为剥离了浏览器，所以也不会识别<code>-webkit-</code>这样的前缀），最后经过处理再输出了<code>cssText</code>就会“信息不完整”。</p>

<p>so，这意味着，如果要完美实现这个 auto sprite 的功能，得修改 cssom 的解析器让其保存所有重复定义（这违背了 css 的运行时应用规则 - -b），想了想难度， 我决定作罢。</p>

<p>so，在限制下，只能搞搞单独的 <code>sprite.css</code> 了</p>

<p><strong>2. 写法限制 </strong></p>

<p>isprite 是处理单张小图片用的，如果要处理多张已经sprite的图片，</p>

<p>考虑这样一种我们<em>已有</em>的 sprite 代码的 常见情况：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-another</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;icon1.png&quot;)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.icon</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;icon2.png&quot;)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.z-icon-follow</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">9px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-88px</span> <span class="m">-137px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.z-icon-fold</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">9px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-101px</span> <span class="m">-136px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用sprite拼合后的代码类似这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-another</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;sprite-another.png&quot;)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.icon</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&quot;sprite.png&quot;)</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-20px</span> <span class="m">-100px</span><span class="p">;</span> <span class="c">/* 此时的 `background-position` 依赖于拼合的图片的位置  */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.z-icon-follow</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">9px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-88px</span> <span class="m">-137px</span><span class="p">;</span> <span class="c">/* 注意，这里没变！*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.z-icon-fold</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">9px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-101px</span> <span class="m">-136px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很容易看出问题在于，在解析和处理css规则的时候，我们根本无法得知 <code>.z-icon-follow</code> 这条规则究竟会使用哪张图片——配合使用<code>.icon</code>还是<code>.icon-another</code>？而且，即使
我们已经写了很多的 sprite 代码都采用了这样的写法，<a href="http://twitter.github.com/bootstrap">bootstrap</a>里的所有 sprite也是这样写的，遵循这样的写法和使用方法，如果真要实现自动sprite，则需要：</p>

<ul>
<li>拟定规则，在处理css的时候对没有<code>background-image</code>的css规则应用指定的<code>background-image</code>，而且还得根据已有的<code>background-position</code>和在最后生成的大图中小图的位置计算出最终icon的<code>background-image</code>（好拗口,>_&lt;）。</li>
<li>或者扫描HTML文件，知道所有的class是如何使用的（基本上是个不可能任务，因为你的HTML代码很可能是模板生成的）</li>
</ul>


<p>所以，基本上，呃……(⊙o⊙)…</p>

<h3>所以没辙了吗？</h3>

<p>不是已经说了么，“一键XX”是不可能的。XD。所以真是这样的时候，重构你的代码和图片吧。对于大型或者持续开发的项目，出发点1 所限的开发方式是比较稳妥的。</p>

<hr />

<h5>别的 sprite 思路？</h5>

<p>有个很特别的sprite 方式，是利用data:url，具体做法和相关优缺点请参考下面的文章：
<a href="http://www.cssforest.org/blog/index.php?id=152">Data URI的利弊</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义上传按钮样式 & ajax上传]]></title>
    <link href="http://filod.github.com/blog/2012/07/22/zi-ding-yi-shang-chuan-an-niu/"/>
    <updated>2012-07-22T17:11:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/07/22/zi-ding-yi-shang-chuan-an-niu</id>
    <content type="html"><![CDATA[<p>自定义上传按钮这个是个老生常谈的问题了，之前在工作中碰到过，简单记录一下。<br/>
实现基本原理是将<code>input[file]</code>表单的透明度设置为0，然后外层用<code>label</code>标签覆盖里层<code>input</code>，按钮样式写在<code>lable</code>当中，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.transparent-file</span><span class="p">{</span>
</span><span class='line'>    <span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">filter</span><span class="o">:</span><span class="n">alpha</span><span class="p">(</span><span class="k">opacity</span><span class="o">=</span><span class="m">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span><span class="m">88px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">32px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.file-lable</span><span class="p">{</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span> <span class="c">/* 使用定位让lable 和 input 重合 */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.button</span><span class="p">{</span>
</span><span class='line'>    <span class="c">/* 你具体button的样式 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;file-lable button&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">class=</span><span class="s">&quot;transparent-file&quot;</span> <span class="na">name=</span><span class="s">&quot;picture&quot;</span>  <span class="nt">/&gt;</span>
</span><span class='line'>    上传头像
</span><span class='line'><span class="nt">&lt;/label&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果你要实现<strong>ajax上传</strong>效果，则可以利用一个隐藏的<code>iframe</code>作为上传<code>form</code>的<code>target</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;about:blank&quot;</span> <span class="na">id=</span><span class="s">&quot;iframe&quot;</span> <span class="na">name=</span><span class="s">&quot;iframe&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none&quot;</span> <span class="nt">&gt;&lt;/iframe&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span>  <span class="na">id=</span><span class="s">&quot;form-id&quot;</span> <span class="na">action=</span><span class="s">&quot;/upload&quot;</span> <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span> <span class="na">target=</span><span class="s">&quot;iframe&quot;</span>  <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 上传按钮在这儿 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其原理是在那个<code>iframe</code>中发起post请求，这样就可以实现ajax上传的效果啦<em>（注意enctype)</em></p>

<p>如果要实现<strong>选择文件后自动上传</strong>的效果，则需要为file表单绑定<code>change</code>事件，当选择文件后会触发<code>change</code>事件，此时调用<code>form</code>元素的<code>submit</code>方法即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$file</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$form</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">submit</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意!</strong> <em>之前我有个思路是把<code>input</code>隐藏掉，同时在单击另一个button的时候触发这个隐藏<code>input</code>的<code>click</code>事件，实时证明是可以的，但是却有兼容性问题：</em>
在IE下，触发了<code>change</code>事件后，自动调用是<code>submit</code>方法将会报错！</p>

<p>与此同时我写了一个jQuery的小插件：</p>

<!-- more -->


<div><script src='https://gist.github.com/3159053.js?file='></script>
<noscript><pre><code>/**
 * @description jquery img 上传插件 for zhihu ~
 * @requires [jquery]
 * @author filod &lt;ll@zhihu.com&gt;
 */
(function($, undefined) {
    var ImgUploader = function(formEl, options) {
            this.isie = true ;
            this.option = $.extend({}, $.fn.imgUploader.defaults, options)
            this.$msg = $('&lt;span&gt;&lt;/span&gt;')
            this.$file = $(this.option.fileCls)
            this.$doBtn = $(this.option.doCls)
            this.$form = $(formEl).on('uploadchange', $.proxy(this.doneCallback, this));
            this.$file.on(&quot;change&quot;, $.proxy(this.upload, this)); 
        }
    ImgUploader.prototype = {
        constructor: ImgUploader,
        upload: function(e) {
            var self = this
            if (!self.checkUploadImageType(this.$file.val())) {
                self.setMessage(&quot;图片不是 . jpg  .png 或 .gif 格式，无法上传&quot;);
                return
            }
            if(this.isie){
                this.$form[0].submit()
                return
            }
        },
        postForm: function (e) {
            this.$form[0].submit()
            return false
        },
        checkUploadImageType: function(fileName) {
            fileName = fileName + &quot;&quot;;
            if (!fileName || fileName.length &lt; 3) {
                return false;
            }
            fileName = fileName.toLowerCase();
            for (var i = this.option.allowType.length - 1; i &gt;= 0; i--) {
                if(!endsWith(fileName,this.option.allowType[i])){
                    continue
                }else{
                    return true
                }
            };
            return false
        },
        setMessage : function  (msg) {
            this.$msg.html(msg).insertBefore(this.$form)
        },
        doneCallback : function(e, data) {
            if(data.r === 1){ //上传失败了
                this.setMessage(data.msg)
            }else if(data.r === 0){ 
                this.setMessage('')
                $('.avatar-preview').attr('src',data.msg)
            }
        }
    }
    function endsWith(str, suffix) {
        var l = str.length - suffix.length;
        return l &gt;= 0 &amp;&amp; str.indexOf(suffix, l) == l;
    }

    $.fn.imgUploader = function(option) {
        return this.each(function() {
            var $this = $(this),
                data = $this.data('scrollspy'),
                options = typeof option == 'object' &amp;&amp; option
            if (!data) {
                $this.data('imagloader', (data = new ImgUploader(this,option)))
            }
        })
    }
    $.fn.imgUploader.defaults = {
        doCls: '.do-upload',
        fileCls: '.avatar-file',
        allowType : ['jpg','gif','jpeg','png']
    }
})(jQuery);
</code></pre></noscript></div>


<p>当然，这是针对公司特定应用的，如果要使用到自己的项目中还得修改一下。用法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#form-id&#39;</span><span class="p">).</span><span class="nx">imgUploader</span><span class="p">();</span> <span class="c1">//option defalt 见源码</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>iframe</code>有回调则可以在回调中调用<code>$('#avatar-form').trigger('uploadchange',data);</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让内联（inline）元素自动换行]]></title>
    <link href="http://filod.github.com/blog/2012/07/18/rang-inlineyuan-su-zi-dong-huan-xing/"/>
    <updated>2012-07-18T15:09:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/07/18/rang-inlineyuan-su-zi-dong-huan-xing</id>
    <content type="html"><![CDATA[<p>有时候我们需要让一个内联元素在新行显示，方法无非这样几种：</p>

<ol>
<li><strong>直接对该元素 <code>display:block</code></strong><br/>
这样做的问题在于，如果你要处理的元素是链接，那么这整行都变得可以点击了。</li>
<li><strong>在元素外套上一层 <code>div</code></strong><br/>
嗯，基本上满足大部分需要。</li>
<li><strong>不增加标签，直接用css实现。</strong><br/>
因为新老系统要做兼容，如果采用方法2，则需要在代码中新增模板来区分对待，如果能通过css选择器区分不同情况下的a标签如何显示当然是最好了的，其实只通过css也可以直接做到:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.xx-wrap</span> <span class="nt">a</span><span class="nd">:before</span><span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;\a&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">white-space</span><span class="o">:</span> <span class="n">pre</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释一下，斜杠A（\a）表示unicode中的换行符，换行符属于“空白符”（white-space）的一种，<code>white-space</code>属性用于控制空白符如何显示，<code>white-space: pre</code>则意味着换行符的显示方式和在<code>pre</code>标签中一致（即该怎样显示，就怎样显示），关于<code>white-space</code>的其他用法可以参考<a href="http://www.w3school.com.cn/css/pr_text_white-space.asp">这里</a>。整个表达式的意思是在a的前面隐式加上一个换行。</p>

<p><em>更多内容可以参考<a href="http://cheeaun.com/blog/2005/06/whitespace-and-generated-content">Whitespace and generated content</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搬家至此]]></title>
    <link href="http://filod.github.com/blog/2012/07/11/banjiazhici/"/>
    <updated>2012-07-11T12:08:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/07/11/banjiazhici</id>
    <content type="html"><![CDATA[<h2>why here ?</h2>

<p>没有为什么，只是常年没写blog了，搬个地儿，刺激一下自己。</p>

<h2>better place ?</h2>

<p>或许吧，呵呵（皮笑）</p>

<h2>then ?</h2>

<p>what ?</p>

<h3>老博客呢？</h3>

<p>为确保数据不丢失，在俩地方做了backup：</p>

<p><a href="http://filodoldblog.sinaapp.com">sae上的备份</a></p>

<p><a href="http://blogold.filod.net">原始备份（格式更优）</a></p>
]]></content>
  </entry>
  
</feed>
