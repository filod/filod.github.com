<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工作点滴 | filod's not here]]></title>
  <link href="http://filod.github.com/blog/categories/工作点滴/atom.xml" rel="self"/>
  <link href="http://filod.github.com/"/>
  <updated>2012-07-22T18:04:58+08:00</updated>
  <id>http://filod.github.com/</id>
  <author>
    <name><![CDATA[filod]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义上传按钮样式]]></title>
    <link href="http://filod.github.com/blog/2012/07/22/zi-ding-yi-shang-chuan-an-niu/"/>
    <updated>2012-07-22T17:11:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/07/22/zi-ding-yi-shang-chuan-an-niu</id>
    <content type="html"><![CDATA[<p>自定义上传按钮这个是个老生常谈的问题了，之前在工作中碰到过，简单记录一下。<br/>
实现基本原理是将<code>input[file]</code>表单的透明度设置为0，然后外层用<code>label</code>标签覆盖里层<code>input</code>，按钮样式写在<code>lable</code>当中，如：
```css
.transparent-file{</p>

<pre><code>opacity: 0;
-moz-opacity: 0;
filter:alpha(opacity=0);
position: absolute;
width:88px;
height:32px;
top:0;
left:0;
</code></pre>

<p>}
.file-lable{</p>

<pre><code>position: relative; /* 使用定位让lable 和 input 重合 */
</code></pre>

<p>}
.button{</p>

<pre><code>/* 你具体button的样式 */
</code></pre>

<p>}
<code>  
</code>html
<label for="" class="file-lable button"></p>

<pre><code>&lt;input type="file" class="transparent-file" name="picture"  /&gt;
上传头像
</code></pre>

<p></label>
<code>
如果你要实现**ajax上传**效果，则可以利用一个隐藏的`iframe`作为上传`form`的`target`：  
</code>html</p>

<iframe src="about:blank" id="iframe" name="iframe" style="display:none" ></iframe>


<p><form  id="form-id" action="/upload" enctype="multipart/form-data" target="iframe"  method="post"></p>

<pre><code>&lt;!-- 上传按钮在这儿 --&gt;
</code></pre>

<p></form>
<code>``
其原理是在那个</code>iframe`中发起post请求，这样就可以实现ajax上传的效果啦<em>（注意enctype)</em></p>

<p>如果要实现<strong>选择文件后自动上传</strong>的效果，则需要为file表单绑定<code>change</code>事件，当选择文件后会触发<code>change</code>事件，此时调用<code>form</code>元素的<code>submit</code>方法即可：
<code>js
$file.on("change", function(){
  $form[0].submit()  
});
</code>
<strong>注意!</strong> <em>之前我有个思路是把<code>input</code>隐藏掉，同时在单击另一个button的时候触发这个隐藏<code>input</code>的<code>click</code>事件，实时证明是可以的，但是却有兼容性问题：</em>
在IE下，触发了<code>change</code>事件后，自动调用是<code>submit</code>方法将会报错！</p>

<p>与此同时我写了一个jQuery的小插件：</p>

<!-- more -->


<p><div><script src='https://gist.github.com/3159053.js?file='></script>
<noscript><pre><code>/**
 * @description jquery img 上传插件 for zhihu ~
 * @requires [jquery]
 * @author filod &lt;ll@zhihu.com&gt;
 */
(function($, undefined) {
    var ImgUploader = function(formEl, options) {
            this.isie = true ;
            this.option = $.extend({}, $.fn.imgUploader.defaults, options)
            this.$msg = $('&lt;span&gt;&lt;/span&gt;')
            this.$file = $(this.option.fileCls)
            this.$doBtn = $(this.option.doCls)
            this.$form = $(formEl).on('uploadchange', $.proxy(this.doneCallback, this));
            this.$file.on(&quot;change&quot;, $.proxy(this.upload, this)); 
        }
    ImgUploader.prototype = {
        constructor: ImgUploader,
        upload: function(e) {
            var self = this
            if (!self.checkUploadImageType(this.$file.val())) {
                self.setMessage(&quot;图片不是 . jpg  .png 或 .gif 格式，无法上传&quot;);
                return
            }
            if(this.isie){
                this.$form[0].submit()
                return
            }
        },
        postForm: function (e) {
            this.$form[0].submit()
            return false
        },
        checkUploadImageType: function(fileName) {
            fileName = fileName + &quot;&quot;;
            if (!fileName || fileName.length &lt; 3) {
                return false;
            }
            fileName = fileName.toLowerCase();
            for (var i = this.option.allowType.length - 1; i &gt;= 0; i--) {
                if(!endsWith(fileName,this.option.allowType[i])){
                    continue
                }else{
                    return true
                }
            };
            return false
        },
        setMessage : function  (msg) {
            this.$msg.html(msg).insertBefore(this.$form)
        },
        doneCallback : function(e, data) {
            if(data.r === 1){ //上传失败了
                this.setMessage(data.msg)
            }else if(data.r === 0){ 
                this.setMessage('')
                $('.avatar-preview').attr('src',data.msg)
            }
        }
    }
    function endsWith(str, suffix) {
        var l = str.length - suffix.length;
        return l &gt;= 0 &amp;&amp; str.indexOf(suffix, l) == l;
    }

    $.fn.imgUploader = function(option) {
        return this.each(function() {
            var $this = $(this),
                data = $this.data('scrollspy'),
                options = typeof option == 'object' &amp;&amp; option
            if (!data) {
                $this.data('imagloader', (data = new ImgUploader(this,option)))
            }
        })
    }
    $.fn.imgUploader.defaults = {
        doCls: '.do-upload',
        fileCls: '.avatar-file',
        allowType : ['jpg','gif','jpeg','png']
    }
})(jQuery);
</code></pre></noscript></div>

当然，这是针对公司特定应用的，如果要使用到自己的项目中还得修改一下。用法是：<br/>
<code>js
$('#form-id').imgUploader(); //option defalt 见源码
</code>
如果<code>iframe</code>有回调则可以在回调中调用<code>$('#avatar-form').trigger('uploadchange',data);</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让内联（inline）元素自动换行]]></title>
    <link href="http://filod.github.com/blog/2012/07/18/rang-inlineyuan-su-zi-dong-huan-xing/"/>
    <updated>2012-07-18T15:09:00+08:00</updated>
    <id>http://filod.github.com/blog/2012/07/18/rang-inlineyuan-su-zi-dong-huan-xing</id>
    <content type="html"><![CDATA[<p>有时候我们需要让一个内联元素在新行显示，方法无非这样几种：</p>

<ol>
<li><strong>直接对该元素 <code>display:block</code></strong><br/>
这样做的问题在于，如果你要处理的元素是链接，那么这整行都变得可以点击了。</li>
<li><strong>在元素外套上一层 <code>div</code></strong><br/>
嗯，基本上满足大部分需要。</li>
<li><strong>不增加标签，直接用css实现。</strong><br/>
因为新老系统要做兼容，如果采用方法2，则需要在代码中新增模板来区分对待，如果能通过css选择器区分不同情况下的a标签如何显示当然是最好了的，其实只通过css也可以直接做到:<br/>
<code>css
.xx-wrap a:before{
 content: '\a';
 white-space: pre;
}
</code>
解释一下，斜杠A（\a）表示unicode中的换行符，换行符属于“空白符”（white-space）的一种，<code>white-space</code>属性用于控制空白符如何显示，<code>white-space: pre</code>则意味着换行符的显示方式和在<code>pre</code>标签中一致（即该怎样显示，就怎样显示），关于<code>white-space</code>的其他用法可以参考<a href="http://www.w3school.com.cn/css/pr_text_white-space.asp">这里</a>。整个表达式的意思是在a的前面隐式加上一个换行。</li>
</ol>


<p><em>更多内容可以参考<a href="http://cheeaun.com/blog/2005/06/whitespace-and-generated-content">Whitespace and generated content</a></em></p>
]]></content>
  </entry>
  
</feed>
